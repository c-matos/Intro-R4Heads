---
title: "Intro to Data <br> Visualization"
# subtitle: "Hands-on training"
author: "<a href='https://github.com/c-matos' style='color:#28a87d;font-weight:600;'>Carlos Matos</a>&ensp;//&ensp;ISPUP&ensp;//&ensp;November 2023"
format:
  revealjs:
    theme: slides.scss
    logo: ../images/logo.png
    footer: '[Carlos Matos](https://github.com/c-matos) // ISPUP::R4HEADS(2023)'
    multiplex: true
    transition: fade
    progress: true
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: atom-one
    # chalkboard:
    #   theme: whiteboard
    #   boardmarker-width: 4c
    #   buttons: true
    pause: true
    code-copy: true
    #page-layout: custom
    code-line-numbers: false
revealjs-plugins:
  - pointer
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: false
  echo: true
  fig-width: 10.1
  fig-height: 6.3
  fig-align: center
# reference-location: margin
# citation-location: margin
code-annotations: hover
---


```{r}
#| echo: false
#knitr::opts_chunk$set(fig.showtext=TRUE) #use this to show correct fonts with showtext
library(tidyverse)
```



# Data Visualization<br><br><span style='color:#e2e2e2;font-size:.6em;font-family:Asap;font-stretch:87.5%;font-weight:500;'>is any graphical representation of information and data.</span>{background-color="#000000"}

# Data Visualization<br><br><span style='color:#e2e2e2;font-size:.6em;font-family:Asap;font-stretch:87.5%;font-weight:500;'>helps to amplify cognition, gain insights, discover, explain, and make decisions.</span>{background-color="#000000"}


## Importance of visualizing data  

<br>

<b style='font-size:1.3em;'>Figures will often <b class="simple-highlight-grn">carry the weight</b> of your arguments.</b>


:::: incremental
::: question
- They need to be **clear**, **attractive**, and **convincing.** 
- A good visualization can be mean the difference between **success** and failure
  - highly influential *vs* obscure paper
  - grant or contract won or lost
  - help managers make informed decisions
  - **Getting your point across!**
:::
::::

## Calculations do NOT replace graphs

<br>

- 13 datasets with similar x and y means, standard deviations and x-y correlation

```{r}
#| output-location: column
library(datasauRus)
library(kableExtra)
datasaurus_dozen %>% 
    group_by(dataset) %>% 
    summarize(
      mean_x   = mean(x),
      mean_y   = mean(y),
      sd_x     = sd(x),
      sd_y     = sd(y),
      corr_x_y = cor(x, y)
    ) %>% 
  mutate(across(where(is.numeric), 
                scales::number,
                accuracy = 0.1)) 
```




## Calculations do NOT replace graphs

<br>

```{r}
#| label: datasaurus-dozen-prep
#| include: false
#| cache: false
library(ggplot2)
library(patchwork)
library(tidyverse)
library(showtext)
library(datasauRus)
#showtext_auto()
showtext::showtext_opts(dpi = 200)
font_add_google("Asap","Asap")
knitr::opts_chunk$set(fig.showtext=TRUE) #use this to show correct fonts with showtext

original_theme <- theme_get()
theme_set(theme_light(base_family = "Asap"))
theme_update(
  strip.text = element_blank(),
  panel.grid = element_blank(),
  panel.spacing = unit(.8, "lines"),
  plot.title = ggtext::element_markdown(
    family = "Asap", size = 36, hjust = .5, face = "bold", 
    margin = margin(t = 10)
  ),
  plot.subtitle = ggtext::element_markdown(
    size = 20, hjust = .5, face = "italic", lineheight = 1.2, 
    margin = margin(t = 15, b = 25)
  ),
  plot.caption = element_text(color = "grey35", size = 12, hjust = 0),
  panel.border = element_rect(linewidth = rel(1.5))
)

saurus <- datasauRus::datasaurus_dozen

facet <- 
  saurus |> 
  dplyr::filter(dataset != "dino") |> 
  dplyr::mutate(dataset = factor(
    dataset, levels = c("h_lines", "v_lines", "high_lines", 
                        "wide_lines", "slant_up", "slant_down", 
                        "dots", "away", "circle", 
                        "bullseye", "x_shape", "star")
  )) |> 
  ggplot(aes(x, y)) +
    facet_wrap(~ dataset, nrow = 2) +
    scale_x_continuous(guide = "none", name = NULL) + 
    scale_y_continuous(guide = "none", name = NULL)

dino <-
  ggplot(dplyr::filter(saurus, dataset == "dino"), aes(x, y)) +
    facet_wrap(~ dataset) + 
    scale_x_continuous(guide = "none", name = NULL) + 
    scale_y_continuous(guide = "none", name = NULL)

title <- "The Datasaurus (*Anscombosaurus spec.*) Dozen</b>"
subtitle <- "is a set of 13 different datasets with nigh-identical summary statistics, which could lead one to believe the<br>datasets are quite similar. After visualizing the data, it becomes clear that the datasets are markedly different."
caption <- "Source: Designing Data Visualizations to Successfully Tell a Story Course. A posit::conf(2023) Workshop by Cédric Scherer. Available at: https://posit-conf-2023.github.io/dataviz-storytelling/"
```

```{r}
#| label: datasaurus-dozen-dots
#| fig-width: 16
#| fig-height: 7.2
#| echo: false
dino + 
    geom_point(size = 3) +
  facet +
    geom_point(size = 1.8) +
  plot_layout(widths = c(1, 3)) +
  plot_annotation(title = title, subtitle = subtitle, caption = caption)
```

## Calculations do NOT replace graphs

<br>

```{r}
#| label: datasaurus-dozen-trends
#| fig-width: 16
#| fig-height: 7.2
#| echo: false
dino +
    geom_point(color = "grey75", size = 3) + 
    geom_smooth(method = "lm", linewidth = 3, color = "#28A87D", se = FALSE) +
  facet +
    geom_point(color = "grey75", size = 1.8) +
    geom_smooth(method = "lm", linewidth = 2.2, color = "#28A87D", se = FALSE) +
  plot_layout(widths = c(1, 3)) +
  plot_annotation(title = title, subtitle = subtitle, caption = caption) 
```

## Fundamentals of data viz

<blockquote style="font-size:1.3em;font-weight:600;font-family:literata;font-style:italic;">What do a heatmap, a pie chart and a line chart have in common?</blockquote>

```{r}
#| label: chart-types-prep
#| include: false
#| cache: false
library(showtext)
#showtext_auto()
showtext::showtext_opts(dpi = 200)
font_add_google("Asap","Asap")
knitr::opts_chunk$set(fig.showtext=TRUE) #use this to show correct fonts with showtext

theme_set(theme_classic(base_family = "Asap", base_size = 16))
theme_update(
  plot.margin = margin(rep(15, 4)),
  axis.text = element_blank(),
  panel.grid = element_blank(),
  plot.title = element_text(face = "bold", margin = margin(b = 20), size = rel(1.35)),
  plot.title.position = "plot",
  axis.line = element_line(color = "grey45", linewidth = 1),
  axis.title.x = element_text(color = "grey45", margin = margin(t = 10)),
  axis.title.x.top = element_text(color = "grey45", margin = margin(b = 10)),
  axis.title.y = element_text(color = "grey45", margin = margin(r = 10)),
  axis.ticks = element_line(color = "grey45"),
  legend.position = "top",
  legend.title = element_text(color = "grey45"),
  legend.text = element_text(margin = margin(t = 3, b = 3), color = "grey45"),
  legend.background = element_rect(fill = NA, color = NA),
  legend.justification = "left"
)
```

::: {.columns}

::: {.column width="33%"}
```{r}
#| label: viz-pie
#| echo: false
#| fig-width: 5
#| fig-height: 5.5
palmerpenguins::penguins |> 
  dplyr::count(island) |> 
  ggplot() +
  ggforce::geom_arc_bar(
    aes(x0 = 0, y0 = 0, r0 = 0, r = 1, amount = n, fill = island), 
    stat = "pie", color = "white", linewidth = 1.5
  ) +
  geom_text(
    x = c(.5, -.4, -.27), y = c(0, -.2, .6), label = c("Cat. 1", "Cat. 2", "Cat. 3"),
    color = "white", size = 7, family = "Asap SemiCondensed", fontface = "bold"
  ) + 
  coord_fixed() +
  scale_fill_manual(values = c("#19694e", "#28A87D", "#5AD8AE"), guide = "none") +
  labs(x = NULL, y = NULL, title = "Pie Chart") +
  theme(axis.line = element_blank(), axis.ticks = element_blank())
```
:::

::: {.column width="33%"}
```{r}
#| label: viz-heatmap
#| echo: false
#| fig-width: 5
#| fig-height: 5.5
outbreaks::fluH7N9_china_2013 %>% 
  group_by(outcome, gender) %>% 
  dplyr::tally() %>% 
  filter(!is.na(gender)) %>% 
  ggplot(aes(x = gender, y = outcome, fill = n)) + 
    geom_tile(color = "white", size = 3) +
    geom_text(aes(label = n, color = n > 30), 
              family = "Asap SemiCondensed", size = 7) +
    coord_cartesian(clip = "off", expand = FALSE) +
    scale_x_discrete(position = "top") +
    scale_color_manual(values = c("black", "white"), guide = "none") +
    scale_fill_gradientn(
      colors = c("#8ae3c5", "#28A87D", "#0a291f"),
      guide = guide_colorbar(ticks = FALSE, title.position = "top", title.hjust = .5)
    ) +
    labs(x = "Categorical Variable", y = "Categorical Variable", 
         fill = "Numeric Variable", title = "Heatmap Table") +
    theme(axis.line = element_blank(), axis.ticks = element_blank(), 
          legend.text = element_blank(), legend.key.width = unit(3, "lines"),
          legend.key.height = unit(.6, "lines"), legend.justification = "center")
```
:::

::: {.column width="33%"}
```{r}
#| label: viz-line
#| echo: false
#| fig-width: 5
#| fig-height: 5.5
ggplot(dplyr::filter(gapminder::gapminder, country == "United States"),
       aes(x = year, y = gdpPercap)) + 
  geom_line(color = "#28A87D", linewidth = 2, lineend = "round") +
  coord_cartesian(ylim = c(8000, NA)) + 
  labs(x = "Numeric Variable", y = "Numeric Variable", title = "Line Chart")
```
:::

::::

## Fundamentals of data viz

<br>

. . .

<span style='font-size:1.8em;font-family:Literata;'><b>&emsp;&emsp;&rarr; </b><em>All data visualizations <b>map data values into quantifiable features </b> of the resulting graphic</em></span>

<br>

. . .

<span style='font-size:1.8em;font-family:Literata;'><b>&emsp;&emsp;&rarr; </b><em>We refer to these features as <span style='font-size:1.3em;font-family:Literata;'><b>aesthetics</b></em></span></span>

. . .




## {#datavizmapping-dimensions data-menu-title="Mapping dimensions"}

:::::{.columns}
::: {.column width="60%"}
![“Carte figurative des pertes successives en hommes de l'Armée qu'Annibal conduisit d'Espagne en Italie en traversant les Gaules (selon Polybe)” (top) and “Carte figurative des pertes successives en hommes de l'Armée Française dans la campagne de Russie 1812–1813” (bottom) by Charles Joseph Minard (1869)](img/minard-full.png)
:::
::: {.column width="40%"}
:::: question
Mapped Dimensions
::::
- Nº of Napoleon's troops 
- distance
- temperature
- latitude
- longitude
- direction of travel
- location relative to specific dates
:::
:::::

## Common aesthetics

<br>

![Common aesthetics in data visualization](img/common-aesthetics-1.png)

# <span style='line-height:.97;'>All plots have <br><br> <span style='font-size:1.2em;'>Data + Mapping </span> </span> {background-color="#c4edff"}

# ggplot2

## Intro to {ggplot2}

<br>

:::::: {.columns}

:::{.column width="30%"}
![](img/ggplot2.png)
:::

:::::::: {.column width="70%"}
:::incremental 
:::: question
- Has an underlying grammar
- Easy to combine multiple datasets in the same plot
- Solutions become more intuitive as we get to know the grammar
- Made to work iteratively: start with a raw data layer and add annotations and statistical summaries as you go
- Default graphics are quite good (publication-ready)
::::
:::
::::::::
::::::


## Anatomy of a ggplot

<br>

Five <b class="simple-highlight-grn">mapping</b> components:

- **Layer:** What we actually see in the plot. Geometric elements ("geoms". e.g. points, lines, ...) or statistical transformations ("stats". e.g. counting, binning, fitting a model)  

- **Scales:** Convert the values in the data space to values in the aesthetic space  

- **Coordinate system:** Usually cartesian, but other are available (e.g. polar)  

- **Facet:** Subset displays  

- **Theme:** Control finer points of the visualization  

## Anatomy of a ggplot

<br>

Three of which are <b class="simple-highlight-grn">key components</b> that exist in **every plot:**

<br>

. . .

<span style='font-size:1.8em;font-family:Literata;'><b>&emsp;&emsp;&rarr;<em> Data </b></em></span>

. . . 

<span style='font-size:1.8em;font-family:Literata;'><b>&emsp;&emsp;&rarr;<em> Mapping </b></em></span>

. . . 

<span style='font-size:1.8em;font-family:Literata;'><b>&emsp;&emsp;&rarr;<em> Geom </b></em></span>

## Anatomy of a ggplot

<br>

- The overall template of a ggplot looks like this
```{.r}
ggplot(data = DATA) +
    GEOM_FUNCTION(mapping = aes(MAPPINGS))
```

- Where:
  - **DATA** is your dataset
  - Example **GEOM_FUNCTION** are geom_point(), geom_col(), geom_histogram(), ...
  - Example **MAPPINGS** are x = year, y = life_expectancy, fill = death_rate, ...


## First worked example 

```{r}
#| echo: false
theme_set(original_theme)
```


```{r}

#Preparing the data
library(gapminder)

gm_latest <- gapminder %>% 
  filter(year == max(year)) %>% 
  rename(GDPpc = gdpPercap,
         LE = lifeExp)

gm_latest
```


## First worked example

<br>

```{r}
#Plot
ggplot(data = gm_latest) #Data

```

## First worked example

<br>

```{r}
#Plot
ggplot(data = gm_latest) + #Data
  aes(x = GDPpc) #Mapping
```

## First worked example 

<br>

```{r}
#Plot
ggplot(data = gm_latest) + #Data
  aes(x = GDPpc, y = LE) #Mapping
```


## First worked example 

<br>

```{r}
#Plot
ggplot(data = gm_latest) + #Data
  aes(x = GDPpc, y = LE) + #Mapping
  geom_point() #Layer
```

## First worked example

<br>

```{r}
#Plot
ggplot(data = gm_latest) + #Data
  aes(x = GDPpc, y = LE) + #Mapping (global)
  geom_point(aes(size = pop)) #Layer with mapping
```

## First worked example 

<br>

```{r}
#Plot
ggplot(data = gm_latest) + #Data
  aes(x = GDPpc, y = LE) + #Mapping (global, for all geom)
  geom_point(aes(size = pop, color = pop)) #Layer with mapping (only for this geom)
```

## Layer order

<br>

:::::{.columns}
::: {.column width="50%"}
```{r}
#| code-line-numbers: "4-6"
#Plot
ggplot(gm_latest, aes(GDPpc, LE)) + 
  geom_point(aes(size = pop, color = pop)) + 
  geom_hline(yintercept = 73, 
             color = "red", 
             alpha = 1) #After geom_point
```

:::
::: {.column width="50%"}
```{r}
#| code-line-numbers: "3-5"
#Plot
ggplot(gm_latest, aes(GDPpc, LE)) + 
  geom_hline(yintercept = 73, 
             color = "red", 
             alpha = 1) + #Before geom_point
  geom_point(aes(size = pop, color = pop))
```
:::
:::::

## {ggplot2} Theme elements

- Taking the `mtcars` dataset as an example
```{r}
mtcars %>% 
  ggplot(aes(x = mpg, y = hp, color = factor(cyl))) +
  geom_point(size = 4) +
  theme(text = element_text(size = 18))
```


## {ggplot2} Theme elements

![[Theme elements of a ggplot](https://bookdown.org/alapo/learnr/data-visualisation.html)](img/ggplot_elements.png)

## Interactive plots with plotly

```{r}
#| output-location: column
#| fig-height: 2
#| fig-width: 2

#Store the plot in an object
my_plot <- mtcars %>% 
  ggplot(aes(x = mpg, y = hp, 
             color = factor(cyl))) +
  geom_point() 

#Call ggplotly with that object 
#as argument
plotly::ggplotly(my_plot)
```


## Static maps with ggplot

```{r}
#| output-location: column
#| classes: custom-40-60
#Get the data
world <- map_data("world") 

#Plot
world %>% 
  ggplot() +
  geom_polygon(aes(x = long, y = lat, 
                   group = group))  +
  theme(legend.position = "none") +
  theme_void() +
  coord_equal() 
```


## Dynamic maps with leaflet

- For more info about leaflet check the [website]([leaflet](https://rstudio.github.io/leaflet/))
```{r, width = 40, height = 30}
#| class-output: output
library(leaflet)

leaflet(width = 1100, height = 300) %>% 
  addTiles() %>% 
  addPopups(lng= -8.616611357347235, 
            lat=41.14440087224056, 
            popup="ISPUP!")
```

# Exercises